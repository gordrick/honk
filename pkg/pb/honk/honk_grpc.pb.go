// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.8
// source: honk/honk.proto

package honk

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// HonkServiceClient is the client API for HonkService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type HonkServiceClient interface {
	Honk(ctx context.Context, in *HonkRequest, opts ...grpc.CallOption) (*HonkResponse, error)
}

type honkServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewHonkServiceClient(cc grpc.ClientConnInterface) HonkServiceClient {
	return &honkServiceClient{cc}
}

func (c *honkServiceClient) Honk(ctx context.Context, in *HonkRequest, opts ...grpc.CallOption) (*HonkResponse, error) {
	out := new(HonkResponse)
	err := c.cc.Invoke(ctx, "/honk.HonkService/Honk", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// HonkServiceServer is the server API for HonkService service.
// All implementations must embed UnimplementedHonkServiceServer
// for forward compatibility
type HonkServiceServer interface {
	Honk(context.Context, *HonkRequest) (*HonkResponse, error)
	mustEmbedUnimplementedHonkServiceServer()
}

// UnimplementedHonkServiceServer must be embedded to have forward compatible implementations.
type UnimplementedHonkServiceServer struct {
}

func (UnimplementedHonkServiceServer) Honk(context.Context, *HonkRequest) (*HonkResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Honk not implemented")
}
func (UnimplementedHonkServiceServer) mustEmbedUnimplementedHonkServiceServer() {}

// UnsafeHonkServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to HonkServiceServer will
// result in compilation errors.
type UnsafeHonkServiceServer interface {
	mustEmbedUnimplementedHonkServiceServer()
}

func RegisterHonkServiceServer(s grpc.ServiceRegistrar, srv HonkServiceServer) {
	s.RegisterService(&HonkService_ServiceDesc, srv)
}

func _HonkService_Honk_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(HonkRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(HonkServiceServer).Honk(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/honk.HonkService/Honk",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(HonkServiceServer).Honk(ctx, req.(*HonkRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// HonkService_ServiceDesc is the grpc.ServiceDesc for HonkService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var HonkService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "honk.HonkService",
	HandlerType: (*HonkServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Honk",
			Handler:    _HonkService_Honk_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "honk/honk.proto",
}
